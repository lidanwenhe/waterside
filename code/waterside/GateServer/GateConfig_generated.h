// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_GATECONFIG_WATERSIDE_H_
#define FLATBUFFERS_GENERATED_GATECONFIG_WATERSIDE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

#include "CommonConfig_generated.h"

namespace waterside {

struct GateConfig;
struct GateConfigBuilder;

/// 网关服务器配置
struct GateConfig FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GateConfigBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SERVER_ID = 4,
    VT_SERVICE_NAME = 6,
    VT_LOGIC_FPS = 8,
    VT_LOGIC_FPS_WARNING = 10,
    VT_NETWORK = 12,
    VT_NAMEREG_IP = 14,
    VT_NAMEREG_PORT = 16
  };
  /// 服务器ID
  int32_t server_id() const {
    return GetField<int32_t>(VT_SERVER_ID, 0);
  }
  /// 服务名
  const ::flatbuffers::String *service_name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SERVICE_NAME);
  }
  /// 逻辑帧速
  float logic_fps() const {
    return GetField<float>(VT_LOGIC_FPS, 0.0f);
  }
  /// 逻辑警告日志帧速
  float logic_fps_warning() const {
    return GetField<float>(VT_LOGIC_FPS_WARNING, 0.0f);
  }
  /// 网络监听配置
  const waterside::NetworkListenConfig *network() const {
    return GetPointer<const waterside::NetworkListenConfig *>(VT_NETWORK);
  }
  /// 名字注册服务器IP
  const ::flatbuffers::String *namereg_ip() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAMEREG_IP);
  }
  /// 名字注册服务器端口
  const ::flatbuffers::String *namereg_port() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAMEREG_PORT);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_SERVER_ID, 4) &&
           VerifyOffsetRequired(verifier, VT_SERVICE_NAME) &&
           verifier.VerifyString(service_name()) &&
           VerifyField<float>(verifier, VT_LOGIC_FPS, 4) &&
           VerifyField<float>(verifier, VT_LOGIC_FPS_WARNING, 4) &&
           VerifyOffsetRequired(verifier, VT_NETWORK) &&
           verifier.VerifyTable(network()) &&
           VerifyOffsetRequired(verifier, VT_NAMEREG_IP) &&
           verifier.VerifyString(namereg_ip()) &&
           VerifyOffsetRequired(verifier, VT_NAMEREG_PORT) &&
           verifier.VerifyString(namereg_port()) &&
           verifier.EndTable();
  }
};

struct GateConfigBuilder {
  typedef GateConfig Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_server_id(int32_t server_id) {
    fbb_.AddElement<int32_t>(GateConfig::VT_SERVER_ID, server_id, 0);
  }
  void add_service_name(::flatbuffers::Offset<::flatbuffers::String> service_name) {
    fbb_.AddOffset(GateConfig::VT_SERVICE_NAME, service_name);
  }
  void add_logic_fps(float logic_fps) {
    fbb_.AddElement<float>(GateConfig::VT_LOGIC_FPS, logic_fps, 0.0f);
  }
  void add_logic_fps_warning(float logic_fps_warning) {
    fbb_.AddElement<float>(GateConfig::VT_LOGIC_FPS_WARNING, logic_fps_warning, 0.0f);
  }
  void add_network(::flatbuffers::Offset<waterside::NetworkListenConfig> network) {
    fbb_.AddOffset(GateConfig::VT_NETWORK, network);
  }
  void add_namereg_ip(::flatbuffers::Offset<::flatbuffers::String> namereg_ip) {
    fbb_.AddOffset(GateConfig::VT_NAMEREG_IP, namereg_ip);
  }
  void add_namereg_port(::flatbuffers::Offset<::flatbuffers::String> namereg_port) {
    fbb_.AddOffset(GateConfig::VT_NAMEREG_PORT, namereg_port);
  }
  explicit GateConfigBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<GateConfig> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<GateConfig>(end);
    fbb_.Required(o, GateConfig::VT_SERVICE_NAME);
    fbb_.Required(o, GateConfig::VT_NETWORK);
    fbb_.Required(o, GateConfig::VT_NAMEREG_IP);
    fbb_.Required(o, GateConfig::VT_NAMEREG_PORT);
    return o;
  }
};

inline ::flatbuffers::Offset<GateConfig> CreateGateConfig(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t server_id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> service_name = 0,
    float logic_fps = 0.0f,
    float logic_fps_warning = 0.0f,
    ::flatbuffers::Offset<waterside::NetworkListenConfig> network = 0,
    ::flatbuffers::Offset<::flatbuffers::String> namereg_ip = 0,
    ::flatbuffers::Offset<::flatbuffers::String> namereg_port = 0) {
  GateConfigBuilder builder_(_fbb);
  builder_.add_namereg_port(namereg_port);
  builder_.add_namereg_ip(namereg_ip);
  builder_.add_network(network);
  builder_.add_logic_fps_warning(logic_fps_warning);
  builder_.add_logic_fps(logic_fps);
  builder_.add_service_name(service_name);
  builder_.add_server_id(server_id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<GateConfig> CreateGateConfigDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t server_id = 0,
    const char *service_name = nullptr,
    float logic_fps = 0.0f,
    float logic_fps_warning = 0.0f,
    ::flatbuffers::Offset<waterside::NetworkListenConfig> network = 0,
    const char *namereg_ip = nullptr,
    const char *namereg_port = nullptr) {
  auto service_name__ = service_name ? _fbb.CreateString(service_name) : 0;
  auto namereg_ip__ = namereg_ip ? _fbb.CreateString(namereg_ip) : 0;
  auto namereg_port__ = namereg_port ? _fbb.CreateString(namereg_port) : 0;
  return waterside::CreateGateConfig(
      _fbb,
      server_id,
      service_name__,
      logic_fps,
      logic_fps_warning,
      network,
      namereg_ip__,
      namereg_port__);
}

inline const waterside::GateConfig *GetGateConfig(const void *buf) {
  return ::flatbuffers::GetRoot<waterside::GateConfig>(buf);
}

inline const waterside::GateConfig *GetSizePrefixedGateConfig(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<waterside::GateConfig>(buf);
}

inline bool VerifyGateConfigBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<waterside::GateConfig>(nullptr);
}

inline bool VerifySizePrefixedGateConfigBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<waterside::GateConfig>(nullptr);
}

inline void FinishGateConfigBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<waterside::GateConfig> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedGateConfigBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<waterside::GateConfig> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace waterside

#endif  // FLATBUFFERS_GENERATED_GATECONFIG_WATERSIDE_H_
