// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MESSAGELOGIN_H_
#define FLATBUFFERS_GENERATED_MESSAGELOGIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

struct AccountLogin;
struct AccountLoginBuilder;
struct AccountLoginT;

struct AccountLoginReply;
struct AccountLoginReplyBuilder;
struct AccountLoginReplyT;

/// 登录错误码
enum LOGIN_ERROR_CODE : uint32_t {
  /// 成功
  LOGIN_ERROR_CODE_SUCCESS = 0,
  /// 失败
  LOGIN_ERROR_CODE_FAILED = 1,
  LOGIN_ERROR_CODE_MIN = LOGIN_ERROR_CODE_SUCCESS,
  LOGIN_ERROR_CODE_MAX = LOGIN_ERROR_CODE_FAILED
};

inline const LOGIN_ERROR_CODE (&EnumValuesLOGIN_ERROR_CODE())[2] {
  static const LOGIN_ERROR_CODE values[] = {
    LOGIN_ERROR_CODE_SUCCESS,
    LOGIN_ERROR_CODE_FAILED
  };
  return values;
}

inline const char * const *EnumNamesLOGIN_ERROR_CODE() {
  static const char * const names[3] = {
    "SUCCESS",
    "FAILED",
    nullptr
  };
  return names;
}

inline const char *EnumNameLOGIN_ERROR_CODE(LOGIN_ERROR_CODE e) {
  if (::flatbuffers::IsOutRange(e, LOGIN_ERROR_CODE_SUCCESS, LOGIN_ERROR_CODE_FAILED)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesLOGIN_ERROR_CODE()[index];
}

struct AccountLoginT : public ::flatbuffers::NativeTable {
  typedef AccountLogin TableType;
  std::string account{};
};

/// 账号登录
struct AccountLogin FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AccountLoginT NativeTableType;
  typedef AccountLoginBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ACCOUNT = 4
  };
  /// 账号
  const ::flatbuffers::String *account() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ACCOUNT);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_ACCOUNT) &&
           verifier.VerifyString(account()) &&
           verifier.EndTable();
  }
  AccountLoginT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(AccountLoginT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<AccountLogin> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const AccountLoginT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct AccountLoginBuilder {
  typedef AccountLogin Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_account(::flatbuffers::Offset<::flatbuffers::String> account) {
    fbb_.AddOffset(AccountLogin::VT_ACCOUNT, account);
  }
  explicit AccountLoginBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<AccountLogin> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<AccountLogin>(end);
    fbb_.Required(o, AccountLogin::VT_ACCOUNT);
    return o;
  }
};

inline ::flatbuffers::Offset<AccountLogin> CreateAccountLogin(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> account = 0) {
  AccountLoginBuilder builder_(_fbb);
  builder_.add_account(account);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<AccountLogin> CreateAccountLoginDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *account = nullptr) {
  auto account__ = account ? _fbb.CreateString(account) : 0;
  return CreateAccountLogin(
      _fbb,
      account__);
}

::flatbuffers::Offset<AccountLogin> CreateAccountLogin(::flatbuffers::FlatBufferBuilder &_fbb, const AccountLoginT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct AccountLoginReplyT : public ::flatbuffers::NativeTable {
  typedef AccountLoginReply TableType;
  LOGIN_ERROR_CODE errcode = LOGIN_ERROR_CODE_SUCCESS;
  int32_t userid = 0;
};

/// 账号登录回复
struct AccountLoginReply FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AccountLoginReplyT NativeTableType;
  typedef AccountLoginReplyBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ERRCODE = 4,
    VT_USERID = 6
  };
  /// 登录错误码
  LOGIN_ERROR_CODE errcode() const {
    return static_cast<LOGIN_ERROR_CODE>(GetField<uint32_t>(VT_ERRCODE, 0));
  }
  /// 用户ID
  int32_t userid() const {
    return GetField<int32_t>(VT_USERID, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ERRCODE, 4) &&
           VerifyField<int32_t>(verifier, VT_USERID, 4) &&
           verifier.EndTable();
  }
  AccountLoginReplyT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(AccountLoginReplyT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<AccountLoginReply> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const AccountLoginReplyT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct AccountLoginReplyBuilder {
  typedef AccountLoginReply Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_errcode(LOGIN_ERROR_CODE errcode) {
    fbb_.AddElement<uint32_t>(AccountLoginReply::VT_ERRCODE, static_cast<uint32_t>(errcode), 0);
  }
  void add_userid(int32_t userid) {
    fbb_.AddElement<int32_t>(AccountLoginReply::VT_USERID, userid, 0);
  }
  explicit AccountLoginReplyBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<AccountLoginReply> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<AccountLoginReply>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<AccountLoginReply> CreateAccountLoginReply(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    LOGIN_ERROR_CODE errcode = LOGIN_ERROR_CODE_SUCCESS,
    int32_t userid = 0) {
  AccountLoginReplyBuilder builder_(_fbb);
  builder_.add_userid(userid);
  builder_.add_errcode(errcode);
  return builder_.Finish();
}

::flatbuffers::Offset<AccountLoginReply> CreateAccountLoginReply(::flatbuffers::FlatBufferBuilder &_fbb, const AccountLoginReplyT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline AccountLoginT *AccountLogin::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<AccountLoginT>(new AccountLoginT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void AccountLogin::UnPackTo(AccountLoginT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = account(); if (_e) _o->account = _e->str(); }
}

inline ::flatbuffers::Offset<AccountLogin> AccountLogin::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const AccountLoginT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateAccountLogin(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<AccountLogin> CreateAccountLogin(::flatbuffers::FlatBufferBuilder &_fbb, const AccountLoginT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const AccountLoginT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _account = _fbb.CreateString(_o->account);
  return CreateAccountLogin(
      _fbb,
      _account);
}

inline AccountLoginReplyT *AccountLoginReply::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<AccountLoginReplyT>(new AccountLoginReplyT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void AccountLoginReply::UnPackTo(AccountLoginReplyT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = errcode(); _o->errcode = _e; }
  { auto _e = userid(); _o->userid = _e; }
}

inline ::flatbuffers::Offset<AccountLoginReply> AccountLoginReply::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const AccountLoginReplyT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateAccountLoginReply(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<AccountLoginReply> CreateAccountLoginReply(::flatbuffers::FlatBufferBuilder &_fbb, const AccountLoginReplyT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const AccountLoginReplyT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _errcode = _o->errcode;
  auto _userid = _o->userid;
  return CreateAccountLoginReply(
      _fbb,
      _errcode,
      _userid);
}

#endif  // FLATBUFFERS_GENERATED_MESSAGELOGIN_H_
