// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MESSAGEID_H_
#define FLATBUFFERS_GENERATED_MESSAGEID_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

/// 消息ID
enum MESSAGE_ID : uint32_t {
  /// 账号登录
  MESSAGE_ID_ACCOUNT_LOGIN = 0,
  /// 账号登录回复
  MESSAGE_ID_ACCOUNT_LOGIN_REPLY = 1,
  MESSAGE_ID_MIN = MESSAGE_ID_ACCOUNT_LOGIN,
  MESSAGE_ID_MAX = MESSAGE_ID_ACCOUNT_LOGIN_REPLY
};

inline const MESSAGE_ID (&EnumValuesMESSAGE_ID())[2] {
  static const MESSAGE_ID values[] = {
    MESSAGE_ID_ACCOUNT_LOGIN,
    MESSAGE_ID_ACCOUNT_LOGIN_REPLY
  };
  return values;
}

inline const char * const *EnumNamesMESSAGE_ID() {
  static const char * const names[3] = {
    "ACCOUNT_LOGIN",
    "ACCOUNT_LOGIN_REPLY",
    nullptr
  };
  return names;
}

inline const char *EnumNameMESSAGE_ID(MESSAGE_ID e) {
  if (::flatbuffers::IsOutRange(e, MESSAGE_ID_ACCOUNT_LOGIN, MESSAGE_ID_ACCOUNT_LOGIN_REPLY)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesMESSAGE_ID()[index];
}

#endif  // FLATBUFFERS_GENERATED_MESSAGEID_H_
